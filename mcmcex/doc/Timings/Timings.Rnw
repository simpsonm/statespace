<<set-parent-Timings, echo=FALSE, cache=FALSE>>=
set_parent('../mcmcex.Rnw')
@

<<plotsetup, echo=FALSE, message=FALSE>>=
library(ggplot2)
library(scales)
library(plyr)
library(xtable)
library(reshape2)
library(gridExtra)
load("../../mixing/samout.RData")
samout$V.time <- samout$time/samout$V.ES
samout$W.time <- samout$time/samout$W.ES
base <- c("error", "state", "dist")
alts <- c("sdalt", "sealt", "dealt", "trialt")
ints <- c("sdint", "seint", "deint", "triint")
kerns <- c("sdkern", "sekern", "dekern", "trikern")
cis <- c("fullcis", "partialcis")
samout$type <- "Base" #$
samout$type[samout$sampler %in% alts] <- "Alt" 
samout$type[samout$sampler %in% ints] <- "GIS" 
samout$type[samout$sampler %in% kerns] <- "RKern" 
samout$type[samout$sampler %in% cis] <- "CIS" 
samout$samplers <- "Base"
samout$samplers[substr(samout$sampler, 1, 2)=="sd"] <- "State-Dist" 
samout$samplers[substr(samout$sampler, 1, 2)=="se"] <- "State-Error" 
samout$samplers[substr(samout$sampler, 1, 2)=="de"] <- "Dist-Error" 
samout$samplers[substr(samout$sampler, 1, 3)=="tri"] <- "Triple" 
samout$samplers[samout$sampler=="fullcis"] <- "FullCIS"
samout$samplers[samout$sampler=="partialcis"] <- "PartialCIS"
samout$samplers[samout$sampler=="error"] <- "Error"
samout$samplers[samout$sampler=="dist"] <- "Dist"
samout$samplers[samout$sampler=="state"] <- "State"
samlevels <- c("State", "Dist", "Error", "State-Dist", "State-Error", "Dist-Error", 
               "Triple", "FullCIS", "PartialCIS")
samout$samplers <- factor(samout$samplers, levels=samlevels)
meltedsam <- melt(samout, id=c("type", "samplers", "sampler", "V.T", "W.T", 
                            "T.T"))
Vs <- unique(meltedsam$V.T)[1:9] #$
Ws <- Vs
breaks <- Vs[seq(1,9,2)]
label_parsed_split <- function(variable, value){
  llply(as.character(value), function(x) parse(text = strsplit(x, "\\.")[[1]][1]))
}
plotfun <- function(meltedsam, vars, sams, T, title, top){
  castedsam <- dcast(meltedsam, formula=sampler + V.T + W.T + variable + samplers ~ ., 
                     subset=.(variable %in% vars  & T.T==T & sampler %in% sams &
                       V.T<=10^2 & W.T<=10^2))
  colnames(castedsam)[6] <- "value"
  out <- ggplot(data=castedsam, aes(x=V.T, y=W.T, fill=value)) + #$
         geom_tile() +
         scale_fill_gradient("Time/ES", high=muted("red"), low="white",
           guide=guide_colorbar(barheight=10), na.value="red", limits=c(0,top)) +
         facet_grid(variable~samplers, scales="free", labeller=label_parsed_split) +
         scale_x_log10("V = noise", breaks=breaks) + scale_y_log10("W = signal", breaks=breaks) +
         ggtitle(paste(title, T, sep="")) +
         theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.5))
  return(out)
}
plotfun2 <- function(meltedsam, vars, sams, T, title, top){
  var <- substr(vars[1], 1, 1)
  castedsam <- dcast(meltedsam, 
                     formula=samplers + V.T + W.T + variable + type ~ ., 
                     subset=.(variable %in% vars  & T.T==T & 
                       sampler %in% sams & V.T<=10^2 & W.T<=10^2))
  colnames(castedsam)[6] <- "value"
  out <- ggplot(data=castedsam, aes(x=V.T, y=W.T, fill=value)) + #$
          geom_tile() +
          scale_fill_gradient("Time/ES", high=muted("red"), low="white",
                        guide=guide_colorbar(barheight=10),
                        na.value="red", limits=c(0,top)) +
          facet_grid(type~samplers, scales="free", labeller=label_parsed_split) +
          scale_x_log10("V = noise", breaks=breaks) + 
          scale_y_log10("W = signal", breaks=breaks) +
          ggtitle(paste(title, T, sep="")) +
          theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.5))
  return(out)
}
@ 

<<baseESplot, fig.cap=cap, echo=FALSE, fig.height=3.75, fig.width=6, out.width=".48\\textwidth">>=
cap <- "Time per effective draw in the posterior sampler for a time series of lengths $T=10$, $T=100$, and $T=1000$, for $V$ and $W$, and for the state, scaled disturbance, and scaled error samplers. $X$ and $Y$ axes indicate the true values of $V$ and $W$ respectively for the simulated data. Note that the signal-to-noise ratio is constant moving up any diagonal. In the upper left the signal is high, in the lower right the noise is high. Note that for plotting purposes, times larger than the top of the scale are displayed in bright red."
vars <- c("V.time", "W.time")
title <- "Time per effective draw in seconds, T="
p1 <- plotfun(meltedsam, vars, base, 10, title, .03)
p2 <- plotfun(meltedsam, vars, base, 100, title, .3)
p3 <- plotfun(meltedsam, vars, base, 1000, title, 30)
p1
p2
p3
@ 

<<baseintESplot, fig.cap=cap, echo=FALSE, fig.width=10, fig.height=3.25, outwidth=".8\\textwidth">>=
cap <- "Time per effective draw in the posterior sampler for $V$ and $W$ in for $T=10$, $T=100$, and $T=1000$, in the state, scaled disturbance and scaled error samplers and for all three GIS samplers based on any two of these. Horizontal and vertical axes indicate the true values of $V$ and $W$ respectively for the simulated data. Note that the signal-to-noise ratio is constant moving up any diagonal. In the upper left the signal is high, in the lower right the noise is high. Note that for plotting purposes, times larger than the top of the scale are displayed in bright red."
vars <- c("V.time", "W.time")
sams <- c("dist", "error", "deint", "state", "seint", "sdint", "triint", "fullcis", "partialcis")
title <- "Time per effective draw in seconds, T="
p1 <- plotfun(meltedsam, vars, sams, 10, title, .03)
p2 <- plotfun(meltedsam, vars, sams, 100, title, .3)
p3 <- plotfun(meltedsam, vars, sams, 1000, title, 30)
p1
p2
p3
@ 

<<hybridESplot, fig.cap=cap, echo=FALSE, fig.height=3.75, fig.width=5.5, out.width=".49\\textwidth">>=
cap <- "Time per effective draw in the posterior sampler for $V$ and $W$ in for $T=10$, $T=100$, and $T=1000$, in the alternating, GIS, and random kernel samplers. Horizontal and vertical axes indicate the true values of $V$ and $W$ respectively for the simulated data. Note that the signal-to-noise ratio is constant moving up any diagonal. In the upper left the signal is high, in the lower right the noise is high. Note that for plotting purposes, times larger than the top of the scale are displayed in bright red."
sams <- c(alts, ints, kerns)
title <- "Time per effective draw in seconds, T="
p1 <- plotfun2(meltedsam,"V.time", sams, 10, title, .03)
p2 <- plotfun2(meltedsam,"W.time", sams, 10, title, .03)
p3 <- plotfun2(meltedsam,"V.time", sams, 100, title, .3)
p4 <- plotfun2(meltedsam,"W.time", sams, 100, title, .3)
p5 <- plotfun2(meltedsam,"V.time", sams, 1000, title, 30)
p6 <- plotfun2(meltedsam,"W.time", sams, 1000, title, 30)
p1
p2
p3
p4
p5
p6
@ 
